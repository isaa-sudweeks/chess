actor Client
participant Server
participant Handler
participant Service
participant DataAccess
database db

entryspacing 0.9
group#43829c #lightblue Registration
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db:Find UserData by username
break User with username already exists
DataAccess --> Service: UserData
Service --> Server: AlreadyTakenException
Server --> Client: 403\n{"message": "Error: username already taken"}
end
DataAccess --> Service: null
Service -> DataAccess:createUser(userData)
DataAccess -> db:Add UserData
Service -> DataAccess:createAuth(authData)
DataAccess -> db:Add AuthData
Service --> Handler: RegisterResult
Handler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}
end

group#orange #FCEDCA Login
Client -> Server: [POST] /session\n{username, password}
Server -> Handler: {"username":,"password":" "}
Handler -> Service: login(LoginRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db:Find UserData by username
break No User with username exists
DataAccess-->Service:null
Service-->Server: NoUserException
Server --> Client: 500\n{"message": "Error: username not found"}
end
break invalid password
DataAccess-->Service:UserData
Service-->Server:UnuthorizedException
Server --> Client: 401\n{"message": "Error: unauthorized"}
end
DataAccess-->Service:UserData
Service->DataAccess:createAuth(authdata)
DataAccess->db:Add AuthData
Service-->Handler: LoginResult
Handler-->Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}
end
group#green #lightgreen Logout
Client -> Server: [DELETE] /session\nauthToken
Server->Handler:{"authToken":" }
Handler->Service: logout(LogoutRequest)
Service->DataAccess: getAuth(authToken)
DataAccess->db:find AuthData by authToken
break invalid authToken
DataAccess-->Service:null
Service-->Server:UnuthorizedException
Server --> Client: 401\n{"message": "Error: unauthorized"}
end
DataAccess-->Service:AuthData
Service -> DataAccess:deleteAuth(authToken)
DataAccess->db:delete AuthData by authToken
Service-->Handler:LogoutResult
Handler-->Server:{}
Server-->Client:200\n{}
end

group#red #pink List Games
Client -> Server: [GET] /game\nauthToken
Server->Handler:authToken
Handler->Service:listGames(authToken)
Service->DataAccess:getAuth(authToken)
DataAccess->db:find AuthData by authToken
break invalid authToken
DataAccess-->Service:null
Service-->Server:UnuthorizedException
Server --> Client: 401\n{"message": "Error: unauthorized"}
end
DataAccess-->Service:authData
Service->DataAccess:listGames()
DataAccess->db:list all games
DataAccess-->Service:gameData
Service-->Handler:ListResult
Handler-->Server:{ "games": [{"gameID": 1234, "whiteUsername":"", "blackUsername":"", "gameName:""} ]}
Server-->Client:200\n{ "games": [{"gameID": 1234, "whiteUsername":"", "blackUsername":"", "gameName:""} ]}

end

group#d790e0 #E3CCE6 Create Game 
Client -> Server: [POST] /game\nauthToken\n{gameName}
Server->Handler:authToken, {"gameName" : " "}
Handler->Service:createGame(CreateGameRequest)
Service->DataAccess:getAuth(authToken)
DataAccess->db:find AuthData by authToken
break invalid authToken
DataAccess-->Service:null
Service-->Server:UnuthorizedException
Server --> Client: 401\n{"message": "Error: unauthorized"}
end
DataAccess-->Service:AuthData
Service->DataAccess:createGame(gameData)
DataAccess->db:add game data
Service-->Handler:CreateGameResult
Handler-->Server:{"gameID":1234}
Server-->Client:200\n{"gameID":1234}
end

group#yellow #lightyellow Join Game #black
Client -> Server: [PUT] /game\nauthToken\n{playerColor, gameID}
Server->Handler:authToken,{playerColor, gameID}
Handler->Service:joinGame(JoinGameRequest)
Service->DataAccess:getAuth(authToken)
DataAccess->db:find AuthData by authToken
break invalid authToken
DataAccess-->Service:null
Service-->Server:UnuthorizedException
Server --> Client: 401\n{"message": "Error: unauthorized"}
end
DataAccess-->Service:AuthData
Service->DataAccess:getGame(gameID)
DataAccess->db:find game by gameID
break spot aready taken
DataAccess-->Service:gameData
Service-->Server:SpotTakenException
Server-->Client:403\n { "message": "Error: already taken" }
end
DataAccess-->Service:gameData
Service->DataAccess:updateGame(gameData)
DataAccess->db:update game variables
Service-->Handler:JoinGameResult
Handler-->Server:{}
Server-->Client:200\n{}
end

group#gray #lightgray Clear application 
Client -> Server: [DELETE] /db
Server->Handler:
Handler->Service:clear()
Service->DataAccess:clear()
DataAccess->db:Clear all of the objects from the db
Service-->Handler:ClearResult
Handler-->Server:{}
Server-->Client:200\n{}
end
